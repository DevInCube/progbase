<%
    var api = [
        { req: `numbers`,   type: `цілих чисел` },
        { req: `bits`,      type: `чисел 0 та 1` },
        { req: `strings`,   type: `строк, що містять слова` },
        { req: `strnums`,   type: `строк, що містять слова та цілі числа` }
    ];
    var tasks = [
       // numbers
       [ api[0], `Залишити у векторі тільки ті числа, що розміщені між мінімальним та максимальним елементом послідовності (включаючи ці елементи)`],
       [ api[0], `Залишити у векторі тільки ті числа, що розміщені між мінімальним та максимальним елементом послідовності (виключаючи ці елементи)`],
       [ api[0], `Залишити у векторі тільки ті числа, що утворюють із першим його елементом неспадну послідовність`],
       [ api[0], `Залишити у векторі тільки ті числа, що утворюють із першим його елементом незростаючу послідовність`],
       [ api[0], `Сформувати новий вектор цілих числел, що містить попарні суми сусідніх елементів вхідного вектора`],
       [ api[0], `Сформувати новий вектор чисел за правилом: якщо елемент вхідного масиву додатній - він перетворюється на 1, у іншому випадку - на 0. Розбити цей вектор на послідовності по 8 чисел та відкинути неповну послідовність (де кількість чисел <8). Перетворити кожну 8-мку чисел (0 та 1) на число у десятковій системі числення і записати у новий вектор`],
       // bits
       [ api[1], `Розбити цей вектор на послідовності по 8 чисел та відкинути неповну послідовність (де кількість чисел <8). Перетворити кожну 8-мку чисел (0 та 1) на число у десятковій системі числення і записати у новий вектор`],
       [ api[1], `Розбити цей вектор на послідовності по 4 числа та відкинути неповну послідовність (де кількість чисел <4). Перетворити кожну 8-мку чисел (0 та 1) на число у десятковій системі числення і записати у новий вектор`],
       [ api[1], `Отримана вхідна послідовність позначає число, записане у двійковій системі числення. Перетворити його у число в десятковій системі числення`],
       [ api[1], `Отримана вхідна послідовність позначає число, записане у двійковій системі числення. Інвертувати вхідний вектор чисел і перетворити його у число в десятковій системі числення`],
       [ api[1], `Знайти найдовшу послідовність одиниць у векторі, інтерпретувати її як число, записане у двійковій системі числення та перетворити її у число в десятковій системі числення`],
       [ api[1], `Перетворити вхідний вектор чисел на вектор булевих значень. Сформувати новий вектор булевих значень, кожне значення якого є результатом операції OR пар сусідніх елементів вхідного вектора`],
       [ api[1], `Перетворити вхідний вектор чисел на вектор булевих значень. Сформувати новий вектор булевих значень, кожне значення якого є результатом операції AND пар сусідніх елементів вхідного вектора`],
       [ api[1], `Перетворити вхідний вектор чисел на вектор булевих значень. Сформувати новий вектор булевих значень, кожне значення якого є результатом операції XOR пар сусідніх елементів вхідного вектора`],
       // strings
       [ api[2], `Залишити у векторі тільки ті строки, що містять у собі виключно буквенні символи`],
       [ api[2], `Залишити у векторі тільки ті строки, що розпочинаються на голосну літеру`],
       [ api[2], `Залишити у векторі тільки ті строки, довжина яких більша за 3`],
       [ api[2], `Залишити у векторі тільки ті строки, довжина яких менша 6`],
       [ api[2], `Залишити у векторі тільки ті строки, у яких кількість голосних літер більша за кількість приголосних літер`],
       [ api[2], `Перетворити вхідний вектор строк на вектор чисел, де кожне число є довжиною строки із вхідного вектора. Знайти суму елементів результуючого вектора`],
       [ api[2], `Перетворити вхідний вектор строк на вектор чисел, де кожне число є довжиною строки із вхідного вектора якщо строка починається на приголосну літеру та від'ємною довжиною, якщо строка починається на голосну літеру`],
       // strnums
       [ api[3], `Залишити у векторі тільки ті строки, що містять в собі цілі числа`],
       [ api[3], `Залишити у векторі тільки ті строки, що не містять в собі цілі числа`],
       [ api[3], `Перетворити вектор строк на вектор цілих чисел за правилом: якщо строка містить число - результатом буде це число, у іншому випадку результатом буде довжина строки`],
       [ api[3], `Перетворити вектор строк на вектор цілих чисел за правилом: якщо строка містить число - результатом буде модуль цього числа, у іншому випадку результатом буде від'ємна довжина строки`]
    ];
    var task = tasks[parseInt($var) % tasks.length];
%>

### TCP Client

#### Завдання №1. TCP-сервер

Скомпілювати [код TCP-сервера][tcp-server]. Для цього потрібно попередньо встановити бібліотеку [libprogbase][libprogbase] версії `>= 0.3.0`. Якщо компіляція відбувалась не за допомогою __cmake__, перенести у директорію зі скомпільованою програмою файл [text.txt][data-text]. При старті програми потрібно аргументом командного рядка задати порт, по якому сервер буде приймати підключення клієнтів, наприклад:

```sh
./server 3000
```

#### Завдання №2. Запит даних від сервера

Реалізувати TCP-клієнта як консольну програму, мовою С (__cmake__ + __VSCode__, __CLion__) або С++ (__Qt__).

Клієнт після підключення до TCP-сервера (із завдання №1) повинен відправити повідомлення, що містить строку `<%= task[0].req %>` та отримати назад строку із JSON-об'єктом, що містить 2 поля: 

```json
{
    "status": true,
    "data": [  ]
}
```

де `data` - масив <%= task[0].type %>. При виникненні помилки на стороні сервера значення поля `status` буде `false`, 
а замість поля `data` буде прислано поле `error` зі строкою, що описує помилку:

```json
{
    "status": false,
    "error": "Command `bla-bla` not found"
}
```

Після отримання відповіді зв'язок із сервером обірвати.

За допомогою бібліотеки __jansson__ ( C ) або класів __QJsonDocument__ (C++) розпарсити строку відповіді від сервера 
і помістити отриманий масив даних у об'єкт типу `List` (реалізація динамічного списку на C) або класу `vector<T>` (С++). 
Вивести отриманий список (вектор) даних у консоль. Якщо сервер повернув помилку - вивести її у консоль.

#### Завдання №3. Обробка даних

<%= task[1] %>. 

Вивести строку із завданням та результат обробки даних у консоль.

#### Матеріали:

1. [Лекція. Клієнт-серверна архітектура програм. Сокети, протоколи IP, TCP i UDP.][lec-1]

[libprogbase]: https://github.com/PublicHadyniak/libprogbase
[tcp-server]: https://github.com/PublicHadyniak/progbase-samples/tree/master/tasks/tcp_client
[data-text]: https://github.com/PublicHadyniak/progbase-samples/blob/master/tasks/tcp_client/data/text.txt
[lec-1]: https://docs.google.com/document/d/1Lm-2s3EyzOd7ynPMKzi53y3kbZ_UwagXfhWCp6dv4sw/edit?usp=sharing
