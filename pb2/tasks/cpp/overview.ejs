<%
    var tasks = [
        [`2D Точка`, `визначення довжини вектору від (0, 0) до даної точки`, `Вивести всі точки, відстань яких до (0, 0) менша введеного L.`],
        [`3D Точка`, `визначення довжини вектору від (0, 0, 0) до даної точки`, `Вивести всі точки, відстань яких до (0, 0, 0) менша введеного L.`],
        [`Прямокутник`, `визначення площі прямокутника`, `Вивести всі прямокутники, площа яких менша за введене S`],
        [`Прямокутник`, `визначення периметра прямокутника`, `Вивести всі прямокутники, периметр яких більший за введене P`],
        [`Круг`, `визначення площі круга`, `Вивести всі круги, площа яких менша за введене S`],
        [`Коло`, `визначення довжини кола`, `Вивести всі кола, довжина яких більша за введене L`],
        [`Коло`, `визначення відстані від центру кола до точки (X, Y)`, `Вивести всі кола, які містять в своїх межах точку (X, Y), де X та Y задає користувач`],
        [`Геометрична куля`, `визначення об'єму кулі`, `Вивести всі кулі, об'єм яких менший за введене V`],
        [`Геометрична куля`, `визначення площі поверхні кулі`, `Вивести всі кулі, площа поверхні яких більша за введене S`],
        [`Геометрична куля`, `визначення відстані від центру кулі до точки (K, K, K)`, `Вивести всі кулі, які містять в своєму об'ємі точку (K, K, K), де К задає користувач`]
    ];
    var task = tasks[parseInt($var) % tasks.length];
%>

### Introducing C++

#### Завдання №1. С++ Класи

Описати клас для типу __<%= task[0] %>__ у окремому `.h` файлі. 
Клас повинен містити як мінімум 3 приватні поля, серед яких обов'язково має бути поле типу `string` (наприклад, як назва об'єкта). 
У якості полів зберігати мінімальний набір даних, через який можна обчислювати інші значення. 
Наприклад, для квадрата не потрібно зберігати його периметр чи площу у полях, ці значення можуть бути обчислені з довжини його сторони.
Для доступу полів використовувати публічні методи. 
Оголосити у даному класі конструктор, що приймає всі значення для полів класу та метод _<%= task[1] %>_. 
Реалізації всіх методів класів повинні бути винесені у `.cpp` файли.

#### Завдання №2. Стандартні колекції та ввід\вивід в C++

У функції _main()_ створити пустий список вказівників на об'єкти описаного класу __<%= task[0] %>__ використовуючи стандартні колекції мови С++ (наприклад, `std::vector<T>`).

У циклі дати користувачу можливість: 

1. Вивести вміст списку із полями об'єктів у консоль.
2. Додати до списку новий елемент із заданням значень його полів із консолі.
3. <%= task[2] %>
4. Вийти з циклу і завершити роботу програми.

Для зчитування\запису даних у консоль використовувати стандартні засоби мови C++ ([`cin`, `cout`][cpp-io], [`getline()`][cpp-getline]). Використовувати засоби С (`scanf()`, `printf()`) заборонено.

Для створення і знищення об'єктів класів використовувати оператори `new` та `delete`.

Для компіляції програми використати утиліту __cmake__. Перевірити програму на наявність _memory leak_ за допомогою утиліти __Valgrind__. 

Матеріали:

1. [Лекція 1. Введення у мову програмування C++. Відмінності від мови C.][lec1]
1. [Лекція 2. Об’єктно-орієнтоване програмування на С++.][lec2]
    
    [cpp-io]: http://www.cplusplus.com/doc/tutorial/basic_io/
    [cpp-getline]: http://www.cplusplus.com/reference/string/string/getline/
    [lec1]: https://docs.google.com/document/d/1k-u5j_5zpMB8bV0k51wImwWoJvChu46JL6gEFDI0l2w/edit?usp=sharing
    [lec2]: https://docs.google.com/document/d/18uJTTdvPfSDXoOko0vv6w_OWUXITi41PdcybDSKlvxY/edit?usp=sharing
    
