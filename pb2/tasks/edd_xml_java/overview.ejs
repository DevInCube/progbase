### Event-Driven Development, XML and Java

#### Завдання 1. Подійно-орієнтована програма мовою С

На основі модуля [`EventSystem`][c-events] реалізувати програму, що міститиме обробники:

* __CUI__ - інтерфейс для взаємодії із користувачем
* __Configuration__ - для керування конфігурацією програми
* __Data__ - для керування даними

__Конфігурація програми__ - це структура, що містить одну строку - шлях до XML-файлу із даними.

__Дані__ - структура даних, яку може модифікувати користувач. Взяти структуру із домашнього завдання [`xml`][hw-xml].

Дати користувачу можливість у __консольному інтерфейсі__:

* _Змінювати конфігурацію_: задавати довільний шлях до XML-файлу із даними.
* _Змінювати обране поле даних_ із подальшим збереженням структури даних у XML-файл (назва якого задана у конфігурації).

Конфігурацію програми зберігати у XML-файлі з фіксованою назвою: `configuration.xml`.

Взаємодія між обробниками повинна відбуватись через події без використання глобальних та статичних змінних.

На старті програма повинна зчитувати конфігурацію і дані із відповідних XML-файлів і надавати користувачу вибір наступної дії.

#### Завдання 2. Програма мовою Java

Створити мовою Java програму, яка буде зчитувати дані із XML-файлу та відображати їх користувачу.

Скомпільовану Java-програму розмістити у директорії зі скомпільованою C-програмою та файлом `configuration.xml`.

Програма при старті зчитує і десеріалізує XML із конфігураційного файлу у власний об'єкт конфігурації, дістає з нього шлях до файлу з даними і виконує десеріалізацію даних з XML в об'єкт даних.

Окрім цього, використати інтерфейс [`WatchService`][java-ws] для отримання змін, що вноситиме C-програма у файли конфігурацій та даних. Таким чином, якщо WatchService детектує зміну у файлі конфігурації, то програма повинна переключитись на слідкування і за XML-файлом даних, що заданий у конфігурації. Коли WatchService детектує зміну у файлі з даними - відбувається автоматична десеріалізація даних з XML.

Для десеріалізації даних з XML використовувати [`XStream`][java-xstream].

Кожного разу після десеріалізації даних виводити значення полів об'єкта даних у консоль.

#### Загальна структура компонентів системи та їх взаємодії

![system](https://pp.userapi.com/c639824/v639824929/def0/sDjo4ibfcug.jpg)

Матеріали:

1. [Лекція. Подійно-орієнтоване програмування](https://docs.google.com/document/d/1Hg5nt4DAp9WtC8AvtW3bmf6MhLCiCPnxhg0k5EuQiGQ/edit?usp=sharing)
2. [Лекція. Формати обміну даними: CSV, XML, JSON.](https://docs.google.com/document/d/1KT30eqOkPcJgi680ibc3m4waZXaejT5W06zYKW6usEg/edit?usp=sharing)
3. [Java WatchService][java-ws]
4. [Java XStream][java-xstream]

    [hw-xml]: /class/pb2/task/xml
    [c-events]: https://github.com/PublicHadyniak/progbase-samples/tree/master/practices/eventloop
    [java-ws]: https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html
    [java-xstream]: https://x-stream.github.io/tutorial.html
