<%
    var tasks = [
        // Multiple clients tasks
        [`Сервер містить позиції двох точок на одномірному відрізку. Клієнти, при відправці повідомлення серверу мають передати йому в якості даних свій ідентифікатор (0 або 1) та напрямок руху точки (наприклад, -1, 1 або 0). Відповідно до цих даних, сервер має в залежності від ідентифікатора змінити позицію першої чи другої точки на величину, що визначає переданий напрямок руху. У відповідь сервер відправляє клієнту обидві позиції.`, `Програма-клієнт щосекунди робить запит до сервера і, на основі присланих назад даних, малює у консолі дві точки на горизонтальному відрізку. Клієнт може приймати від користувача нажаття 2-ох кнопок, що відповідають за 2 напрямки руху (вліво-вправо), які передаються на сервер разом із ідентифікатором клієнта.  Запустити дві програми-клієнта одну з ідентифікатором 0, а іншу з 1 і переконатись, що вони працюють правильно.`],
        [`Сервер містить координати двох точок. Клієнти, при відправці повідомлення серверу мають передати йому в якості даних свій ідентифікатор (0 або 1) та напрямок руху точки (наприклад, [-1, 0] або [0, 0]). Відповідно до цих даних, сервер має в залежності від ідентифікатора змінити координати першої чи другої точки на величину, що визначає переданий напрямок руху. У відповідь сервер відправляє клієнту обидві координати.`, `Програма-клієнт щосекунди робить запит до сервера і, на основі присланих назад даних, малює у консолі дві точки. Клієнт може приймати від користувача нажаття 4-ох кнопок, що відповідають за 4 напрямки руху, які передаються на сервер разом із ідентифікатором клієнта.  Запустити дві програми-клієнта одну з ідентифікатором 0, а іншу з 1 і переконатись, що вони працюють правильно.`],
        [`Сервер містить список повідомлень від клієнтів. Клієнти можуть передавати серверу один із двох типів запитів: отримати вміст списку і відправити нове повідомлення із ідентифікатором клієнта (наприклад, строка - нікнейм). Відповідно до запиту сервер або лише повертає клієнту список повідомлень, або додає у список нове повідомлення із ідентифікатором і повертає назад оновлений список повідомлень.`, `При старті програми-клієнта, вона запитує у користувача його ідентифікатор (нікнейм). Потім програма щосекунди робить запит до сервера і, на основі присланих назад даних, виводить у консолі список повідомлень від сервера. Клієнт може приймати від користувача введене повідомлення і відправляти його на сервер разом із своїм ідентифікатором.  Запустити дві програми-клієнта із різними ідентифіакторами і переконатись, що вони працюють правильно.`],
        // FileSystem tasks
        [`Сервер може приймати від клієнтів 2 запити: на створення файлу із заданою назвою і заданим текстовим вмістом та на зчитування файлу за заданим іменем. У відповідь сервер надсилає клієнту результат запису файлу (true або false) або результат зчитування файлу (файл не знайдено, або вміст файлу)`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може обрати одну з двох дій: відправити на сервер назву і вміст файлу або назву файлу для зчитування на стороні сервера. Відповідь від сервера виводити у консоль.`],
        [`Сервер може приймати від клієнтів 3 запити: на отримання списку файлів директорії у якій запущений сервер, на створення файлу із заданою назвою у цій директорії та на видалення файлу із директорії за заданим іменем. У відповідь сервер надсилає клієнту результат виконання запиту.`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може ввести запит, який відправиться на сервер. Відповідь від сервера виводити у консоль.`],
        [`Сервер може приймати від клієнтів 2 запити: на отримання списку файлів директорії у якій запущений сервер та на отримання вмісту фекстового файлу із цієї директорії за заданим іменем. У відповідь сервер надсилає клієнту результат виконання запиту.`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може ввести запит, який відправиться на сервер. Відповідь від сервера виводити у консоль.`],
        // ADT tasks
        [`Сервер містить список строк. Клієнти можуть відправляти серверу запити на: додавання нової строки у список, отримання розміру списку, отримання всіх елементів списку, отримання строки із сервера по індексу, заміни строки у списку за індексом, видалення строки зі списку за індексом. Після виконання кожної дії сервер обов'язково повертає клієнту результат.`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може ввести один із доступних запитів до сервера та відправити його серверу. Відповідь від сервера виводити у консоль.`],
        [`Сервер містить стек строк. Клієнти можуть відправляти серверу запити на: додавання нової строки у стек, отримання розміру стеку, отримання всіх елементів стеку, отримання верхньої строки стеку, видалення строки зі стеку. Після виконання кожної дії сервер обов'язково повертає клієнту результат.`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може ввести один із доступних запитів до сервера та відправити його серверу. Відповідь від сервера виводити у консоль.`],
        [`Сервер містить чергу строк. Клієнти можуть відправляти серверу запити на: додавання нової строки у чергу, отримання розміру черги, отримання всіх елементів черги, отримання строки з голови черги, видалення строки з черги. Після виконання кожної дії сервер обов'язково повертає клієнту результат.`, `Клієнт у циклі опрацьовує ввід користувача. Користувач може ввести один із доступних запитів до сервера та відправити його серверу. Відповідь від сервера виводити у консоль.`]
        // [``, ``],
    ];
    var task = tasks[parseInt($var) % tasks.length];
%>

### UDP Client-Server

Задано базовий код UDP-клієнта та UDP-сервера. Для компіляції кодів необхідно підключити бібліотеку [__libprogbase__ (версії >= 0.2.0)][libprogbase]. 
Завдання можна виконувати як мовою С (обов'язково з `CMakeLists.txt`) так і мовою С++ (з `CMakeLists.txt` або проектом __Qt Creator__).

#### Завдання №1. UDP сервер

<%= task[0] %>

Базовий код UDP-сервера:

```c
#include <stdio.h>
#include <stdlib.h>
#include <progbase/net.h>

#define BUFFER_LEN 1024

int main(void) {
    //
    // create UDP server
    UdpClient * server = UdpClient_init(&(UdpClient){});
    IpAddress * address = IpAddress_initAny(&(IpAddress){}, 9999);
    if (!UdpClient_bind(server, address)) {
        perror("Can't start server");
        return 1;
    }
    printf("Udp server started on port %d\n", 
        IpAddress_port(UdpClient_address(server)));
    
    NetMessage * message = NetMessage_init(
        &(NetMessage){},  // value on stack
        (char[BUFFER_LEN]){},  // array on stack 
        BUFFER_LEN);

    IpAddress clientAddress;
    while (1) {
        puts("Waiting for data...");
        //
        // blocking call to receive data from clients
        UdpClient_receiveFrom(server, message, &clientAddress);
        printf("Received message from %s:%d (%d bytes): `%s`\n",
            IpAddress_address(&clientAddress),  // client IP-address
            IpAddress_port(&clientAddress),  // client port
            NetMessage_dataLength(message),
            NetMessage_data(message));
            
        // @todo Process clients input and send response
        
        //
        // send echo response
        UdpClient_sendTo(server, message, &clientAddress);
    }
    //
    // close server
    UdpClient_close(server);
    return 0;
}
```

#### Завдання №2. UDP клієнт

<%= task[1] %>

Базовий код UDP-клієнта:

```c
#include <stdio.h>
#include <stdlib.h>
#include <progbase/net.h>

#define BUFFER_LEN 1024

int main(void) {
    //
    // create UDP client
    UdpClient * server = UdpClient_init(&(UdpClient){});
    IpAddress * serverAddress = IpAddress_init(&(IpAddress){}, "127.0.0.1", 9999);
    NetMessage * message = NetMessage_init(
        &(NetMessage){},  // value on stack
        (char[BUFFER_LEN]){},  // array on stack 
        BUFFER_LEN);

    while (1) {
        puts("Please, input request:");
        
        // @todo Read user input and create request message
        
        //
        // send request to server
        UdpClient_sendTo(server, message, serverAddress);
        //
        // blocking call to receive response data from server
        UdpClient_receiveFrom(server, message, serverAddress);
        printf("Received message from server (%d bytes): `%s`\n",
            NetMessage_dataLength(message),
            NetMessage_data(message));
            
        // @todo Show server response to user
        
    }
    //
    // close client
    UdpClient_close(server);
    return 0;
}
```

Матеріали: 

* [Лекція. Клієнт-серверна архітектура програм. Сокети, протоколи IP, TCP i UDP.](https://docs.google.com/document/d/1Lm-2s3EyzOd7ynPMKzi53y3kbZ_UwagXfhWCp6dv4sw/edit?usp=sharing)

[libprogbase]: https://github.com/PublicHadyniak/libprogbase
