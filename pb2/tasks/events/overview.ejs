<%
  var tasks = [
    `Створити обробник-таймер зворотнього відліку. Нажаття на кнопку [Enter] стартує таймер на 7 секунд. Нажаття на кнопку [Space] може призупинити/відновити відлік таймеру. Кнопка [Esc] відміняє таймер. Після закінчення відліку таймер зупиняється і генерується відповідна подія`,
    `Створити обробник-таймер. Нажаття на кнопку [Space] стартує\призупиняє відлік часу в секундах. Якщо час перетинає 5 секунд - зупинити відлік і згенерувати подію про це. Кнопка [R] обнуляє відлік`,
    `Створити обробник, що містить список довільних строк і індекс поточної строки для відображення. Нажаття на кнопку [S] збільшує індекс поточної строки, на [W] зменшує індекс. При зміні індексу у консоль виводиться поточна строка.`,
    `Створити обробник, що може перебувати в одному з двох станів: отримання вводу строки і відображення введеної строки. При нажатті на [Enter] хендлер переключається між цими станами. У стані вводу попередньо введена строка очищується, а всі нажаття на кнопки символів заносяться в нову строку, у стані відображення - введена строка відображається.`,
    `Створити обробник, що містить список імен декількох людей, які знаходяться поза кімнатою та пустий (спочатку) список людей у кімнаті. Випадковим чином в часі обробник обирає випадкову людину і переносить її з одного списку у інший. При цьому генерується подія типу "Тарас зайшов у кімнату" або "Тарас вийшов з кімнати". Створити іншого обробника, який реагує на події від першого обробника і включає чи виключає світло в кімнаті в залежності від того, чи є хтось всередині. При цьому другий обробник генерує відповідні події.`,
    `Створити обробник, що на нажаття кнопок [1-5] генерує події входу/виходу людей із текстового чату. Створити обробника, що позначає чат із учасниками, обробляє події від першого обробника і виводить список учасників чату.`,
    `Створити обробник, що на нажаття кнопок [1-5] генерує події в'їзду/виїзду автомобілів з парковки. Створити обробника, що позначає автомобільну парковку, обробляє події від першого обробника і виводить список машин (номери) на парковці.`,
    `Обробник 1 з певною періодичністю випадковим чином генерує двовимірні координати. Обробник 2 так само генерує кола із випадковими координатами та радіусом. Обробник 3 обробляє події від обох обробників і коли генерується подія про нове коло - рахує всі точки від подій першого обробника, які містяться в новому колі та генерує подію з кількістю таких точок у колі.`,
    `Створити обробник-таймер, який з періодичністю N мілісекунд буде викликати функцію задану вказівником. Таймер може реагувати на події зупинки і продовження виконання таймера, які генеруються іншими обробниками (наприклад, на натискання певних кнопок).`,
    `Обробник 1 по події старту програми зчитує довільний текстовий файл і на зчитування кожної голосної букви генерує повідомлення, що містить цю голосну букву як дані. Обробник 2 обробляє такі події і у випадку повторення голосної букви (незалежно від регістру) генерує іншу подію про повторення з інформацією про букви, які повторювались. Обробник 3 слухає події обробника 2 і виводить інформацію про них у консоль.`,
    `Обробник 1 по події старту програми зчитує довільний текстовий файл і на зчитування кожної десяткової цифри генерує повідомлення, що містить цифру як дані. Обробник 2 слухає такі події і сумує цифри у число, якщо сума перевищує деяке N - генерується спеціальна подія, що містить цю суму, а сама сума обнуляється. Створити два обробника типу 'Обробник 2', кожен з який при створенні отримує різне значення N.`,
    `Обробник 1 по події старту програми зчитує довільний текстовий файл і на зчитування кожної шістнадцяткової цифри генерує повідомлення, що містить цифру як дані. Обробник 2 слухає такі події і сумує цифри у число, якщо сума перевищує деяке N - генерується спеціальна подія, що містить цю суму, якщо сума перевищує деяке K (> N) - генерується подія іншого типу, а сама сума обнуляється. Створити два обробника типу 'Обробник 2', кожен з який при створенні отримує різні значення N та K.`
  ];
  var task = tasks[parseInt($var) % tasks.length];
%>

### Event-Driven Programming

На основі [модуля системи подій (EventSystem)][event-system-src] реалізувати подійно-орієнтовану програму. 

Весь код рішення описати в одному файлі `main.c`.

#### Варіант завдання

<%= task %>. 

#### Зауваження

Забороняється використання глобальних та статичних змінних.

  [event-system-src]: https://github.com/PublicHadyniak/progbase-samples/tree/master/practices/eventloop
