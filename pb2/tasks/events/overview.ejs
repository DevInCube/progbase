<%
  var tasks = [
    `Нажаття на кнопку [Enter] стартує таймер на 5 секунд. Нажаття пробілу може призупинити/відновити відлік таймеру. Кнопка [Esc] відміняє таймер.`,
    `Нажаття на кнопку [Space] стартує\призупиняє відлік часу в секундах. Якщо час перетинає 5 секунд - зупинити відлік і згенерувати повідомлення, що відображає певне повідомлення у консолі. Кнопка [R] обнуляє лічильник часу`,
    `Створити обробника, що містить список довільних строк і індекс поточної строки для відображення. Нажаття на кнопку [S] збільшує індекс поточної строки, на [W] зменшує індекс. При зміні індексу у консоль виводиться поточна строка.`,
    `Створити обробника, що може перебувати в одному з двох станів: отримання вводу строки і відображення введеної строки. При нажатті на [Enter] хендлер переключається між цими станами. У стані вводу попередньо введена строка очищується, а всі нажаття на кнопки символів заносяться в нову строку, у стані відображення - введена строка відображається.`,
    `Створити обробника, що містить список імен декількох людей, які знаходяться поза кімнатою та пустий (спочатку) список людей у кімнаті. Випадковим чином в часі обробник обирає випадкову людину і переносить її з одного списку у інший. При цьому генерується подія типу "Тарас зайшов у кімнату" або "Тарас вийшов з кімнати". Створити іншого обробника, який реагує на події від першого обробника і включає чи виключає світло в кімнаті в залежності від того, чи є зтось всередині. При цьому другий обробник генерує відповідно події.`,
    `Створити обробника, що на нажаття кнопок [1-5] генерує події входу/виходу людей із текстового чату. Створити обробника, що позначає чат із учасниками, обробляє події від першого обробника і виводить список учасників чату.`,
    `Створити обробника, що на нажаття кнопок [1-5] генерує події в'їзду/виїзду автомобілів з парковки. Створити обробника, що позначає автомобільну парковку, обробляє події від першого обробника і виводить список машин (номери) на парковці.`,
    `Обробник 1 з певною періодичністю випадковим чином генерує двовимірні координати. Обробник 2 так само генерує кола із випадковими координатами та радіусом. Обробник 3 обробляє події від обох обробників і коли генерується подія про нове коло - рахує всі точки від подій першого обробника, які містяться в новому колі та генерує подію з кількістю таких точок у колі.`
  ];
  var task = tasks[parseInt($var) % tasks.length];
%>

### Event-Driven Programming

На основі [реалізації системи подій][event-system-src] реалізувати подійно-орієнтовану програму за варіантом: 

<%= task %>. 

Забороняється використання глобальних та статичних змінних.

  [event-system-src]: https://github.com/PublicHadyniak/progbase-samples/tree/master/practices/eventloop
