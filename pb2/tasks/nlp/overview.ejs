<%
   var tasks = [
`Видалити зі всіх речень всі стоп-слова. Слова, що залишилися, записати у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Відсортувати речення у порядку спадання кількості слів. Вивести кожне речення відсортованого списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`Відсортувати у кожному реченні слова у алфавітному порядку. Вивести кожне речення відсортованого списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`Відсортувати у кожному реченні слова у порядку зростання довжини слова. Вивести кожне речення відсортованого списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`У кожному з речень видалити слова, що дублюються у межах речення. Вивести кожне речення списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`Залишити тільки унікальні в межах тексту слова. Відсортувати їх у порядку зростання довжини слова в межах всього тексту і записати кожне слово у окремому рядку вихідного файлу.`,
`Порахувати кількість конкретних стоп-слів у тексті і вивести у вихідний текстовий файл інформацію у вигляді стоп-слово: кількість (кожне слово у окремому рядку)`,
`Залишити у списках всі слова, що мають довжину більшу 3. Відсортувати їх у порядку зростання довжини слова в межах всього тексту і записати кожне слово у окремому рядку вихідного файлу.`,
`Залишити у реченнях тільки слова, що закінчуються на ing. Записати слова у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Видалити у реченнях всі слова, що закінчуються на ed або розпочинаються на un. Записати слова, що залишилися, у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Залишити всі слова, що розпочинаються на in, un, non. Записати слова, що залишилися, у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Залишити у кожному реченні тільки всі пари сусідніх слів, де перше слово з них not. Записати слова, що залишилися, у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Видалити зі всіх речень всі стоп-слова та слова із довжиною, що менша 4. Всі слова, що залишилися, записати кожне з нового рядка у вихідних файл.`,
`Привести всі слова до нижнього реєстру і відкинути всі суфікси ed та ing. Всі слова, що залишилися, записати кожне з нового рядка у вихідних файл.`,
`Залишити у списках всі слова, що мають довжину більшу 5. Відсортувати їх у порядку спадання довжини слова в межах всього тексту і записати кожне слово у окремому рядку вихідного файлу.`,
`Відсортувати речення у порядку зростання сумарної довжини всіх слів. Вивести кожне речення відсортованого списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`Відсортувати речення у алфавітному порядку по перших буквах їх перших слів. Вивести кожне речення відсортованого списку у окремому рядку вихідного файлу. Слова розділяти комами.`,
`Видалити всі речення, у яких менше 5 слів. Записати слова, що залишились у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Залишити тільки слова, що починаються із великої літери. Відсортувати їх у порядку зростання довжини слова в межах всього тексту і записати кожне слово у окремому рядку вихідного файлу.`,
`Видалити всі речення, у яких є слова із довжиною більшою за 8 символів. Записати слова у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Привести всі слова до нижнього реєстру і видалити зі всіх речень всі стоп-слова. Всі слова, що залишилися, записати кожне з нового рядка у вихідний файл.`,
`Залишити у реченнях тільки унікальні слова в межах речення. Відсортувати їх у порядку спадання довжини слова в межах речення. Записати слова у вихідний файл розділяючи їх комами. Кожне речення на окремому рядку файлу.`,
`Видалити всі слова, що починаються із великої або голосної літери. Відсортувати їх у порядку зростання довжини слова в межах всього тексту і записати кожне слово у окремому рядку вихідного файлу.`
   ];
   
   var task = tasks[parseInt($var) % tasks.length];
%>

### Natural Language Processing

Знайти будь-який текст англійською мовою і зберегти його у текстовий файл (мінімум 5 КБ). 

Створити модуль __nlp__ із типами __Text__, __Sentence__ i __Word__.

```
typedef struct Text Text;
typedef struct Sentence Sentence;
typedef struct Word Word;
...
```

У програмі зчитати текст і розбити його на речення, які помістити у __динамічний список речень__ всередині типу __Text__. 

Кожне речення (тип __Sentence__) зберігати в пам'яті у вигляді __динамічного списку слів__ (тип __Word__).

<%= task %>

Зберегти результат у інший текстовий файл.

#### Замітки

Рекомендований порядок виконання:

1. Описати інтерфейси для списків слів і речень.
1. Описати структури та деякі допоміжні функції для типів Text, Sentence, Word відповідно до завдання 
(наприклад, перевірку чи слово є стоп-словом).
1. Описати модуль для зчитування тексту з файлу і запису результату у файл.
1. Описати функцію для виконання обробки тексту за завданням у тому ж файлі, що і main().
1. Об'єднати виклики функцій з модулів у main().

#### Замітки №2

Для того, щоби в користувацькому кожі відв'язатися від реалізації типів даних, сховайте описи структур у файл `nlp.c`:

```
/* nlp.h */
typedef struct Text Text;
typedef struct Sentence Sentence;
typedef struct Word Word;
...
void Text_addSentence(Text * self, Sentence * sentence);
int Text_countSentences(Text * self);
Sentence * Text_getSentence(Text * self, int sentenceIndex);
...
void Sentence_addWord(Sentence * self, Word * sentence);
int Sentence_countWords(Sentence * self);
Word * Sentence_getWord(Sentence * self, int wordIndex);
...
bool Word_isStopWord(Word * self);
const char * Word_getString(Word * self);
...
/* nlp.c */

struct Text { /* implementation */ };
struct Sentence { /* implementation */ };
struct Word { /* implementation */ };
...
```

Приклад інтерфейса модуля роботи із файлом:

```
/* storage.h */
#include <nlp.h>

Text * Storage_readText(const char * filePath);
void Storage_writeResult(const char * filePath, /* result type here */ result);
```

Функцію за варіантом опишіть у `main.c`, наприклад:

```
#include <nlp.h>
#include <storage.h>

/* result type */ processText(Text * text, /* some aditional params here */);

int main(void) {
   Text * text = Storage_readText("text.txt");
   /* result type */ result = processText(text, /* some args here */);
   Storage_write(result);
   //
   // free result here
   //
   Text_free(&text);
   return 0;
}

/* result type */ processText(Text * text, /* some aditional params here */) {
    /* process text here */
    ... 
}

```

Матеріали:

1. [Стоп-слова в NLP][1]

   [1]: https://en.wikipedia.org/wiki/Stop_words
