### [Extra] Continuous Integration

Створити модуль для організації університетських даних, що містить типи:

* Студент
* Викладач
* Список

та функції:

* Формування списку студентів із CSV строки.
* Формування CSV строки із списку студентів.
* Прикріплення списку студентів до викладача.
* Отримання N студентів викладача, що мають найбільшу кількість балів.

Описати модульні тести (на основі фреймворку Check) для перевірки коректності роботи описаних функцій.

Оформити модуль у вигляді статичної бібліотеки і опублікувати код у GitHub репозиторії.

Додати у репозиторій безперервну інтеграцію за допомогою [Travis CI][ci], яка запускатиме описані модульні тести. 

У `README.md` репозиторію додати лейбл зі статусом збірки бібліотеки ([приклад][ci-sample]) 
та лейбл [Codecov][codecov] для відображення міри покриття коду тестами ([приклад][cov-sample]).


Матеріали:

1. [Лекція  3.  Обробка помилок. Модульне тестування. Continuous Integration][test-ci]

  [test-ci]: https://docs.google.com/document/d/1bBVm38PPY8b5iEE15Q0qFIJFusyhZzg25VdDczF9Ciw/edit?usp=sharing
  [ci]: https://docs.google.com/document/d/1bBVm38PPY8b5iEE15Q0qFIJFusyhZzg25VdDczF9Ciw/edit#heading=h.t0y1w99ac5hl
  [ci-sample]: https://github.com/PublicHadyniak/libprogbase/
  [codecov]: https://codecov.io/
  [cov-sample]: https://github.com/ReactiveX/RxJava

