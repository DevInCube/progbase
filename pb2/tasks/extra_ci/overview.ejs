<%
  var tasks = [
    `Отримання списку N студентів викладача, що мають найбільшу кількість балів.`,
    `Отримання списку N студентів викладача, що мають найменшу кількість балів.`,
    `Функція, що приймає викладача і список студентів і в результаті створює новий список, у який заносяться студенти із вхідного списку, що прив'язані до даного викладача.`,
    `Функція, що приймає викладача і список студентів і в результаті створює новий список, у який заносяться студенти із вхідного списку, що не прив'язані до даного викладача.`,
    `Функція, що приймає двох викладачів і в результаті створює список зі студентами, що прив'язані до обох викладачів.`,
    `Функція, що приймає двох викладачів і в результаті створює список зі студентами, що прив'язані першого викладача, але не значаться у списку другого.`,
    `Функція, що приймає двох викладачів і в результаті створює список зі студентами, що прив'язані другого викладача, але не значаться у списку першого.`,
    `Функція, що приймає двох викладачів і в результаті створює список із N студентів обох викладачів, у яких найбільше балів.`,
    `Функція, що приймає двох викладачів і в результаті створює список із N студентів обох викладачів, у яких найменше балів.`
  ];
  
  var task = tasks[parseInt($var) % tasks.length];
%>

### [Extra] Continuous Integration

Створити модуль для організації університетських даних, що містить типи:

* Студент
* Викладач
* Список

та функції:

* Формування списку студентів із CSV строки.
* Формування CSV строки із списку студентів.
* Прикріплення списку студентів до викладача.
* <%= task %>

Описати модульні тести (на основі фреймворку Check) для перевірки коректності роботи описаних функцій.

Оформити модуль у вигляді статичної бібліотеки і опублікувати код у GitHub репозиторії.

Додати у репозиторій безперервну інтеграцію за допомогою [Travis CI][ci], яка запускатиме описані модульні тести. 

У `README.md` репозиторію додати лейбл зі статусом збірки бібліотеки ([приклад][ci-sample]) 
та лейбл [Codecov][codecov] для відображення міри покриття коду тестами ([приклад][cov-sample]).

У папку завдання навчального репозиторія додати файл `link.txt` із посиланням на репозиторій GiHub.


Матеріали:

1. [Лекція  3.  Обробка помилок. Модульне тестування. Continuous Integration][test-ci]

  [test-ci]: https://docs.google.com/document/d/1bBVm38PPY8b5iEE15Q0qFIJFusyhZzg25VdDczF9Ciw/edit?usp=sharing
  [ci]: https://docs.google.com/document/d/1bBVm38PPY8b5iEE15Q0qFIJFusyhZzg25VdDczF9Ciw/edit#heading=h.t0y1w99ac5hl
  [ci-sample]: https://github.com/PublicHadyniak/libprogbase/
  [codecov]: https://codecov.io/
  [cov-sample]: https://github.com/ReactiveX/RxJava

