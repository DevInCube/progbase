<%
  var variant = parseInt($var);
  var groupnum = ($group && ($group.length > 1) && !isNaN(parseInt($group[1]))) ? parseInt($group[1]) : 0;
  var n0 = parseInt($var[1]);
  var n1 = parseInt($var[0]);
 
  var favorites = [
    `режисерів фільмів`,
    `книг`,
    `героїв книг`,
    `фільмів`,
    `героїв фільмів`,
    `акторів`,
    `пісень`,
    `виконавців пісень`,
    `веб-сайтів`,
    `міст світу`,
    `країн світу`,
    `планет`,
    `тварин`,
    `мемів`,
    `розділів математичного аналізу`
  ];
  
  var files = [
    `JSON-список всіх слів у файлі`,
    `JSON-об'єкт із інформацією про кількість всіх слів у файлі та найдовше слово`,
    `JSON-об'єкт із інформацією про кількість всіх слів у файлі та найкоротше слово`,
    `JSON-об'єкт із інформацією про найдовше та найкоротше слово у файлі`,
    `JSON-список всіх чисел у файлі`,
    `JSON-об'єкт із інформацією про кількість всіх чисел у файлі та найбільше число`,
    `JSON-об'єкт із інформацією про кількість всіх чисел у файлі та найменше число`,
    `JSON-об'єкт із інформацією про найбільше та найменше число у файлі`,
    `JSON-об'єкт із інформацією про кількість всіх чисел у файлі та середнє числове значення`
  ];
  
  var task = [
    favorites[(variant + groupnum) % favorites.length],
    files[(variant + groupnum + 3) % files.length]
  ];
%>

## HTTP сервер

#### Мета:

Навчитися створювати простий web-сервер із взаємодією через __протокол HTTP__. Навчитися оформлювати __GitHub репозиторій__ із кодом, перевіряти збірки проекту за допомогою __безперервної інтеграції (Continuous Integration)__ та створювати документацію коду мовою С або C++ за допомогою утиліти __Doxygen__.

#### Завдання №1. Створення web-сервера

Створити TCP-сервер, що слухає запити на підключення TCP клієнтів і взаємодіє з ними за допомогою протоколу __HTTP__. Сервер повинен обробляти лише HTTP __GET__ запити і повертати коректно-сформовані HTTP-відповіді. Інтерфейс сервера дозволяє звертатися до нього по HTTP-шляхах:

* `/` - відправити у відповідь JSON-об'єкт із інформацією про сервер: 
    ```json
    {
        "title": "%SERVER_NAME%", 
        "developer": "%YOUR_NAME_SURNAME%", 
        "time": "%SERVER_TIME%"
    }
    ```
* `/favorites` - JSON-список із об'єктів, що позначають список ваших улюблених <%= task[0] %>. Кожен такий об'єкт має мати декілька полів, серед яких обов'язково має бути числове поле `id` із унікальним для кожного об'єкта значенням.
* `/favorites?{key}={value}` - JSON-підсписок тих об'єктів зі списку `/favorites`, у яких поле `{key}` має значення `{value}`. Ключ `{key}` по якому відбувається фільтрація списку обрати довільно.
* `/favorites/{id}` - JSON-об'єкт зі списку `/favorites` за ідентифікатором з числовим значенням `{id}`. Якщо об'єкта із таким значенням `id` не було знайдено, повертати у відповідь HTTP статус `404 Not Found`.
* `/file` - зчитати вміст файлу `data.txt`, який попередньо розмістити у директорії `data/` проекту. <%= task[1] %>

#### Завдання №2. Створення документації проекту за допомогою Doxygen

Виконати коментування інтерфейсів модулів у форматі `Doxygen` ([приклад][doc-sample]).

Для цього кожен заголовочний файл повинен починатися на коментар виду:

```c
/** @file
    @brief Some text about this header
*/
```

Перед кожною визначеною структурою даних має бути коментар:

```c
/**
    @struct List
    @brief defines a generic List data type
*/
```

Перед кожною функцією інтерфейсу також розмістити коментар із інформацією про призначення функції, її параметри та результат, що повертається:

```c
/**
    @brief remove item from list by value
    @param ref - reference to memory from where to read compared value
    @returns true if success removal
*/
bool List_remove(List * self, void * ref);
```

Встановити __Doxygen__:

```sh
sudo apt-get install doxygen graphvis
```

Перейти у директорію проекта і згенерувати файл із конфігурацією (`Doxyfile`):

```sh
doxygen -g
```

Задати налаштування:

```sh
PROJECT_NAME           = "Project Name Here"
EXTRACT_ALL            = NO
FILE_PATTERNS          = *.c *.cpp *.h
RECURSIVE              = YES
```

Згенерувати документацію командою:

```sh
doxygen Doxyfile
```

Doxygen створить директорію `docs/` із піддиректоріями `html/` і `latex/`, які міститимуть документацію у різних форматах (не забудьте додати `docs/` у `.gitignore`).

Для перегляду згенерованої документації перейдіть у директорію `html/` і відкрийте файл `index.html` у веб-браузері.

#### Завдання №3. Безперервна інтеграція (Continuous Integration)

Налаштувати збірку проекта із сервером за допомогою утиліти __cmake__. 

Зареєструватись на сайті [Github][github] та створити віддалений публічний репозиторій, у який надіслати файли проекту. 

Створити у проекті директорію `install/` і додати у неї файл `install-libprogbase.sh`:

```sh
#!/bin/sh

wget -O libprogbase.zip https://github.com/PublicHadyniak/libprogbase/archive/master.zip
unzip libprogbase.zip -d libprogbase
cd libprogbase/libprogbase-master ; sudo make install
cd ../../ ; rm libprogbase/ libprogbase.zip -rf
```

Додати у кореневу директорію проекта файл `.travic.yml` із вмістом:

```yml
sudo: required
language: c
os:
  - linux
compiler: 
  - gcc

before_install:
  - sudo apt-get install libssl-dev
  - sh scripts/install-libprogbase.sh

script: 
  - cmake . 
  - make .
  - sudo make install
```

Зареєструватись на сайті [Travis-CI][travis] та синхронізувати його із профілем Github. Налаштувати у Travis-CI збірку репозиторія зі створеним сервером. Після кожного `push` комітів у віддалений репозиторій GitHub, Travis-CI збиратиме проект і оновлюватиме статус його збірки. Мітку із зображенням статусу збірки та посиланнями на історію збірок ([![Travis-CI][travis-badge]][travis-builds]) додати у `README.md` так:

```md
[![Travis-CI][travis-badge]][travis-builds]

[travis-badge]: https://travis-ci.org/PublicHadyniak/libprogbase.svg?branch=master
[travis-builds]: https://travis-ci.org/PublicHadyniak/libprogbase/builds
```

Замінити `PublicHadyniak` на ваш нікнейм на GitHub, а `libprogbase` на назву репозиторія із проектом сервера.

#### Матеріали:

1. [Лекція. Клієнт-серверна архітектура програм. Сокети, протоколи IP, TCP i UDP.][lec-1]
2. [Лекція. World Wide Web (WWW). URL. Протокол HTTP][http-lec]

[doc-sample]: https://github.com/PublicHadyniak/libprogbase/blob/master/include/progbase/list.h
[github]: https://github.com
[travis]: https://travis-ci.org
[lec-1]: https://docs.google.com/document/d/1Lm-2s3EyzOd7ynPMKzi53y3kbZ_UwagXfhWCp6dv4sw/edit?usp=sharing
[http-lec]: https://docs.google.com/document/d/1aUdlTlbHDYhhdf2gVs1j94FmBrLviKb8QLfFVxqi-0A/edit#heading=h.1ii1x15xikxx
[travis-badge]: https://travis-ci.org/PublicHadyniak/libprogbase.svg?branch=master
[travis-builds]: https://travis-ci.org/PublicHadyniak/libprogbase/builds
