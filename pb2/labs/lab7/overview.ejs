<%
  var variant = parseInt($var);
  var groupnum = ($group && ($group.length > 1) && !isNaN(parseInt($group[1]))) ? parseInt($group[1]) : 0;
  var n0 = parseInt($var[1]);
  var n1 = parseInt($var[0]);
  
  //
  // https://shkspr.mobi/blog/2016/05/easy-apis-without-authentication/
  // public JSON API's
  var endpoints = [
    [`Pokemon`, `http://pokeapi.co/`, `Створити клас __Pokemon__ із декількома характеристиками покемона, дані для яких можна отримати із API. На основі відповідей від API заповнити список різних покемонів`, `дозволяє переглядати список отриманих покемонів із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всіх покемонів певного типу - вогняних). Користувач може обирати значення критерію`],
    [`StarWars`, `https://swapi.co/`, `Створити клас __Character__ із декількома характеристиками персонажа, дані для яких можна отримати із API. На основі відповідей від API заповнити список різних персонажів`, `дозволяє переглядати список отриманих персонажів із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всіх персонажів із планети Tatooine). Користувач може обирати значення критерію`],
    [`Game of Thrones`, `https://anapioficeandfire.com/`, `Створити клас __Character__ із декількома характеристиками персонажа, дані для яких можна отримати із API. На основі відповідей від API заповнити список різних персонажів`, `дозволяє переглядати список отриманих персонажів із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всіх персонажів дому Старків). Користувач може обирати значення критерію`],
    [`Films`, `https://ghibliapi.herokuapp.com/films/`, `Створити клас __Film__ із декількома характеристиками фільму, дані для яких можна отримати із API. На основі відповідей від API заповнити список різних фільмів`, `дозволяє переглядати список отриманих фільмів із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всі фільми режисера Hayao Miyazaki). Користувач може обирати значення критерію`],
    [`Countries`, `https://country.register.gov.uk/records.json`, `Створити клас __Country__ із декількома характеристиками країни, дані для яких можна отримати із API. На основі відповідей від API заповнити список різних країн`, `дозволяє переглядати список отриманих країн із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всі країни, що були засновані після заданої дати). Користувач може обирати значення критерію`],
    [`Sunrise-sunset`, `https://sunrise-sunset.org/api`, `Створити клас __SunData__. Створити список міст із їх геокординатами. Описати функцію, що за допомогою запропонованого API та списку координат країн дозволятиме отримувати дані про час сходу та заходу сонця`, `дає користувачу можливість обрати одне із заданих міст. Візуалізувати час сходу та заходу сонця у обраному місті а також поточну позицію сонця відносно сходу-заходу. Вивести додаткову інформацію: наприклад, скільки часу пройшло від сходу і скільки залищилось до заходу`],
    [`Postcodes`, `http://postcodes.io/`, `Створити клас __PostCodeInfo__ із декількома характеристиками поштового коду, дані для яких можна отримати із API. На основі відповідей від API заповнити список випадкових поштових кодів (http://api.postcodes.io/random/postcodes)`, `дозволяє переглядати список отриманих поштових кодів із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всі коди України). Користувач може обирати значення критерію`],
    [`BBC Radio`, `http://www.bbc.co.uk/radio1/playlist.json`, `Створити клас __Composition__ із декількома характеристиками пісні, дані для яких можна отримати із API. На основі відповідей від API заповнити список поточних композицій радіо`, `дозволяє переглядати список отриманих композицій із їх характеристиками (у формах) та фільтрувати відображення цього списку по певному критерію (наприклад, всі по неточному співпадінні назви пісні та виконавця). Користувач може обирати значення критерію`],
    [`Google Maps`, `https://maps.googleapis.com/maps/api/geocode/json?address=Kiev`, `Створити клас __GeoData__. Створити список деяких міст світу. Описати функцію, що за допомогою запропонованого API та списку країн дозволятиме отримати приблизну відстань між двома містами на основі їх геокоординат`, `дає користувачу обрати два міста зі списку міст та обчислює приблизну відстань між ними, а також візуалізує приблизне розміщення міст на двовимірній схематичній карті`],
    [`Github`, `https://developer.github.com/v3/`, `Створити клас __Repository__ із декількома характеристиками Github-репозиторію, дані для яких можна отримати із API. Створити список мов програмування. Створити функцію, що за допомогою запропонованого API та списку мов програмування дозволятиме шукати відповідні репозиторії (https://api.github.com/search/repositories?q=Java)`, `дозволяє користувачу обрати мову програмування по якій потрібно шукати репозиторії та відображає список знайдених репозиторіїв з їх характеристиками`]
  ];
  
  var task = endpoints[variant % endpoints.length];
%>

## TCP клієнт та публічні Web API

#### Мета:

Навчитися користуватись публічними [API (Application Programming Interface)][api-wiki] web-сайтів у мережі Інтернет за допомогою TCP клієнта та парсерів форматів даних.

#### Додаткова інформація

##### HTTP та URI

Комунікація із web-серверами відбувається за допомогою протоколу __HTTP__ (із прикладного рівня стеку TCP/IP). У даній лабораторній роботі розглядається лише базова HTTP-взаємодія за допомогою __GET__ запитів.

Всі дані у __World Wide Web (WWW)__ ідентифікуються за допомогою [URI][uri-wiki] строки. Такі строки ви можете бачити у web-браузері при переході між сторінками web-сайтів. URI має власний синтаксис і URI строка може складатися із різних смислових частин. Нехай дано URI певних даних, які надає API web-сайту: `http://www.some.org/articles/1`. В рамках даної лабораторної роботи необхідно вміти виділяти 3 частини URI:

* `http://` - протокол взаэмодії
* `www.some.org` - хост-ім'я сервера
* `/articles/1` - шлях до ресурсу сервера

При зверненні до web-сервера необхідно отримати на основі хост-імені його IP-адресу (`www.some.org -> 192.168.0.1`) та використовувати порт за замовчуванням (наприклад `80`-ий порт для HTTP).

##### HTTPS

Для URI із схемою `https://` потрібно взаємодіяти із сервером по протоколу [__HTTPS__][https-wiki] виконуючи захищене підключення за допомогою [__SSL__][ssl-wiki]. Якщо Ви використовуєте бібліотеку `libprogbase` (`>= 0.3.4`), захищене з'єднання ініціюється функцією `TcpClient_connectSecure()` (перед оновленням бібліотеки встановіть `sudo apt-get install libssl-dev`). У __HTTPS__ порт за замовчуванням  `443`.

#### Крок №1. Створення TCP-клієнта

__Замітка__: 
даний крок призначений для ознайомлення зі способом підключення і отримання даних від web-сервера по протоколу HTTPS для використання у кроці №2.
Якщо Ви використовуєте `libprogbase`, встановіть `sudo apt-get install libssl-dev` та оновіть `libprogbase` до версії `>= 0.3.4`. 
У запитах використовуйте версію протоколу `HTTP/1.0`. 

Реалізувати модуль, що використовує TCP клієнт для підключення до [тестового web-сервера][test-api]. 

Для виконання HTTP(S) GET запиту на отримання даних із web-сервера через TCP потрібно:

1. Виконати підключення TCP клієнта до сервера із хост-іменем `api.github.com` (потрібно програмно отримати IP-адресу сервера). Порт обирається відповідно до протоколу доступу (`80` для __HTTP__ або `443` для __HTTPS__).
1. Після успішного з'єднання сформувати строку HTTP GET запиту виду: `GET %s HTTP/1.0\r\nHost: %s\r\n\r\n`, де замість першого параметру форматування задати URL-шлях, що розташований за хост-іменем (наприклад, `/`), а замість другого параметру - хост-ім'я сайту (наприклад, `api.github.com`).
1. Відправити сформовану строку на сервер і отримувати відповідь доки розмір отриманих у відповідь байт не буде `0`. Всі частини відповіді об'єднати у одну строку. Видалити зі строки всі символи, що розміщені перед двома __end-of-line__ підряд (end-of-line: `\n` (Unix) або `\r\n` (Windows) . Результат звірити з JSON строкою, що відображається при переході на сайт у браузері.

#### Крок №2. Отримання та парсинг даних з API

Дано публічний [API <%= task[0] %>](<%= task[1] %>) за URI `<%= task[1] %>`.
Виконуючи HTTP(S) GET запити по різних шляхах даного сайту можна отримувати у відповідь дані у строці формату __JSON__.
Використовуючи класи платформи Qt для роботи із JSON розпарсити отриману строку у JSON-дерево. <%= task[2] %>.

__Зверніть увагу__ на те, що кількість запитів до API протягом дня може бути обмеженою і після N-нного запиту в день дані стануть недоступні для вас аж до наступного дня.

#### Крок №3. Відображення даних у віконних програмах

Створити віконну програму Qt, що <%= task[3] %>.

#### Матеріали:

1. [Лекція. Клієнт-серверна архітектура програм. Сокети, протоколи IP, TCP i UDP.][lec-1]
2. [Лекція. World Wide Web (WWW). URL. Протокол HTTP][http-lec]

[https-wiki]: https://en.wikipedia.org/wiki/HTTPS
[ssl-wiki]: https://en.wikipedia.org/wiki/Transport_Layer_Security
[api-wiki]: https://en.wikipedia.org/wiki/Application_programming_interface
[uri-wiki]: https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Examples
[test-api]: https://api.github.com/
[lec-1]: https://docs.google.com/document/d/1Lm-2s3EyzOd7ynPMKzi53y3kbZ_UwagXfhWCp6dv4sw/edit?usp=sharing
[http-lec]: https://docs.google.com/document/d/1aUdlTlbHDYhhdf2gVs1j94FmBrLviKb8QLfFVxqi-0A/edit#heading=h.1ii1x15xikxx
